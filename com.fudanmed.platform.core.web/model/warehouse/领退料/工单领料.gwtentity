package com.fudanmed.platform.core.web feature warehouse{
	
	import java.util.*
	import edu.fudan.langlab.uidl.domain.app.*
	import com.google.gwt.user.client.^ui.*	
	import com.google.gwt.editor.client.HasEditorErrors
	import com.sencha.gxt.widget.core.client.button.TextButton
	import edu.fudan.langlab.domain.organization.*
	import edu.fudan.langlab.domain.security.*
	import edu.fudan.langlab.uidl.domain.app.client.web.*
	import com.uniquesoft.gwt.client.common.*
	import com.uniquesoft.gwt.shared.common.pager.*
	import com.uniquesoft.gwt.client.common.widgets.pager.IPager
	import com.uniquesoft.gwt.client.common.widgets.*

	import com.fudanmed.platform.core.common.*
	import com.fudanmed.platform.core.domain.*
	import com.fudanmed.platform.core.warehouse.*
	import com.fudanmed.platform.core.warehouse.^proxy.*
	import com.fudanmed.platform.core.web.*
	import com.uniquesoft.gwt.shared.GWTEntity
	import com.uniquesoft.gwt.client.common.print.*
	import com.fudanmed.platform.core.web.server.^service.^template.*
	import com.sencha.gxt.widget.core.client.Component
	

	ui-entity UIWorkItemOutStockRecord for RCWorkItemOutStockRecord{
		reportSid : String "报修单号"
		sid : String "领料单号"
		sourceStore : proxy of RCWarehouse "出库仓库"
		workItem : proxy of RCWorkItemTask "工单号"
		date : Date "领料日期"
		operator : proxy of RCEmployee "操作员"
		itemSummarys : UIWarehouseProductSpecSummary[*] "领料明细"
		comment : String "备注"
		print : Boolean "打印领料单"
		fitPrint : Boolean "套打"
	
		map WorkItemOutStockRecordMapper validate by WorkItemOutStockRecordValidator{
			direct{sid readonly,sourceStore,workItem,date,operator,comment,{reportSid,entity.workItem.groupTask.repairTask.reportSid}readonly}
			to entity{
				entity.initItemsFromSummary(
					ui.itemSummarys.^map[itemSummary|
						new RCProductSpecificationSummary=>[
							it.productSpec = entities.get(typeof(RCProductWarehouseStorageSummary),itemSummary.storageSummary.id).productSpec
							it.quantity = itemSummary.quantity
						]
					].toList
				)
			}
			
		}
	
		constraints WorkItemOutStockRecordValidator{
			rule Required on sourceStore
			rule Required on workItem
			rule Required on itemSummarys
		}

		ui-component WorkItemOutStockRecordDetailForm as GXTForm{
			binding{
				reportSid as ReadonlyItem,
				sid as ReadonlyItem,sourceStore as ReadonlyItem, workItem as ReadonlyItem, date as ReadonlyItem,
				operator as ReadonlyItem,comment as ReadonlyItem
			}
			con : Widget
			asWidget() : Widget{
				con = con.lazy[
					TABLE=>[
						tr=>[
							td=>[it += reportSid.asWidget]
							td=>[it += workItem.asWidget]
							td=>[it += sid.asWidget]
						]
						tr=>[
							td=>[it += sourceStore.asWidget]
							td=>[it += date.asWidget]
							td=>[it += operator.asWidget]
						]
					]
				]
			}
		}
	
		ui-component WorkItemOutStockRecordForm as GXTForm{
			@Inject transferRecordItemListGrid : WarehouseProductSpecSummaryListGrid
			@Inject transferRecordItemForm : WarehouseProductSpecSummaryForm
			required timeService : client.common.ServerSideTimeServiceAsync
			binding{
				sourceStore as RequiredComboBoxItem content from AllWarehouseByManagerContentProvider,
				reportSid as ReadonlyItem,
				workItem as ReadonlyItem,
				itemSummarys as ListGridBasedItem(transferRecordItemListGrid),
				comment,
				date as ReadonlyItem,
				print as CheckBoxItem,
				fitPrint as CheckBoxItem
				
			}
			con : Widget
			op setSourceWarehouseContext(employee : proxy of RCEmployee, notifier : (Void)=>void):void{
				this.sourceStoreContentProvider.load(employee)[
					notifier.apply(null)
				]
			}
			
			op setSourceWarehouse(store : proxy of RCWarehouse) : void{
				transferRecordItemForm.setSourceWarehouse(store)
			}
			
			op setProductSummary(productSummary : UIProductWarehouseStorageSummary):void{
				transferRecordItemForm.storageSummary.value = productSummary
				transferRecordItemForm.sourceQuantity.value = productSummary?.quantity.nullsafe
			}
			productSidSelectedHandler:(String, RCWarehouseProxy)=>void
			op setProductSidSelectedHandler(callback:(String,RCWarehouseProxy)=>void):void{
				this.productSidSelectedHandler = callback
			}
			lastInputComponent : Component
			
			op asWidget() : Widget{
				con = con.lazy[
					widgets.VLayout=>[
						add(TABLE=>[
							tr=>[
								td=>[it += date.asWidget=>[
									timeService.getTime(onSuccess[
										date.value=it
									])
								]]
								td=>[it += sourceStore.asWidget=>[
									sourceStore.addValueChangedListener[
										transferRecordItemForm.setSourceWarehouse(it)
										transferRecordItemForm.storageSummary.clear		
										itemSummarys.value = newArrayList							
									]
								]]
							]
							tr=>[
								td=>[it += reportSid.asWidget]								
								td=>[it += workItem.asWidget]								
							]
						],widgets.VLayoutData(1,-1))
						add(widgets.FieldSet("领料明细")=>[
							widget = widgets.VLayout=>[
								it += TABLE=>[
									lastInputComponent = transferRecordItemForm.storageSummary.field
									tr=>[
										td=>[it += transferRecordItemForm.storageSummary.asWidget=>[
											width = 485
											transferRecordItemForm.storageSummary.addSelectionChangedListener[
												transferRecordItemForm.sourceQuantity.value = it.head.quantity
											]
											transferRecordItemForm.storageSummary.field.addBlurHandler[
												transferRecordItemForm.productSid.value = transferRecordItemForm.storageSummary.value?.productSpecsSid
											]
											OnEnter[
												lastInputComponent = transferRecordItemForm.storageSummary.field
												transferRecordItemForm.quantity.focus
											]
											
										]]
										td=>[
											it += transferRecordItemForm.productSid.asWidget=>[
												transferRecordItemForm.productSid.field.addBlurHandler[
													productSidSelectedHandler?.apply(transferRecordItemForm.productSid.value,sourceStore.value)
												]
												OnEnter[
													lastInputComponent = transferRecordItemForm.productSid.field
													transferRecordItemForm.quantity.focus
												]
											]
										]
									]
								]
								it += TABLE=>[
									tr=>[
										td=>[ width="330" it += transferRecordItemForm.sourceQuantity.asWidget]
										td=>[
											it += transferRecordItemForm.quantity.asWidget
											OnEnter[
												createItem()=>[
													if(it!=null){
														transferRecordItemListGrid.addElement(it)
														lastInputComponent.focus
														
													}
												]
											]
										]
									]
								]
								addFill(itemSummarys.asWidget=>[height=250])
								itemSummarys.objectCreater=[createItem]
							]
						],widgets.VLayoutData(1,-1))
						transferRecordItemListGrid.addEditCompleteListener[
							transferRecordItemListGrid.updateElement(it=>[
								sourceQuantity = storageSummary.quantity
							])
						]
						add(TABLE=>[
							tr=>[
								td=>[it += print.asWidget=>[width=130 print.value = true]]
								td=>[it += fitPrint.asWidget=>[width=130 fitPrint.value = true]]
							]
						],widgets.VLayoutData(1,-1,2))
						
					]
				]
			}		
			
			op createItem():UIWarehouseProductSpecSummary{
				if(transferRecordItemForm.quantity.value == null ||
					transferRecordItemForm.storageSummary.value == null
				)
					null
				else if(transferRecordItemForm.quantity.value>transferRecordItemForm.storageSummary.value.quantity){
					widgets.MessageBox("无效输入","库存数量不足").show
					null
				}else	 
					transferRecordItemForm.valueAsNew=>[
						val v = transferRecordItemForm.storageSummary.value
						it.productName = v.name
						it.sourceQuantity = v.quantity
						it.productSid = v.productSpecsSid
						it.typeDesc = v.typeDesc
						it.brand = v.brand
						it.unit = v.unit
						it.id = -now.time
						
						transferRecordItemForm.quantity.value = null
						transferRecordItemForm.sourceQuantity.value = null
						transferRecordItemForm.productSid.value = null
						transferRecordItemForm.storageSummary.value = null
					]				
			}	
		}
	
		ui-component WorkItemOutStockRecordListGrid as GXTGrid{
			binding{sid,sourceStore,workItem,operator,date,comment}
		}
			
	}
	
	presenter CreateOrUpdateWorkItemOutStockRecordPresenter with-validation implements CommitablePresenter{
		view interface{
			op getValue() : UIWorkItemOutStockRecord
			op setValue(value : UIWorkItemOutStockRecord) : void
			op setWorkItemTask(workItem   : proxy of RCWorkItemTask, repairTask : proxy of RCRepairTask):void
			op setSourceWarehouseContext(employee : proxy of RCEmployee, notifier : (Void)=>void):void	
			signal out productSidEntered(productSid : String, store : proxy of RCWarehouse)
			op setProductSummary(productSummary : UIProductWarehouseStorageSummary):void
		}
		
		interaction{
			used4Update : boolean
			
			input call.setup4Create(workItem: proxy of RCWorkItemTask,
				(CreateOrUpdateWorkItemOutStockRecordPresenter)=>void postInitializer
			){
				used4Update = false
				this.activate[
					service.getCurrentUser(onSuccess[
						getView().setSourceWarehouseContext(it)[
							service.getRepairTask(workItem,onSuccess[
								getView().setWorkItemTask(workItem,it)
								postInitializer.apply(this)
							])
							
							
						]])
				]
			}
			input view.productSidEntered(sid : String, store : proxy of RCWarehouse){
				service.getProductSummaryByProductSid(sid,store,onSuccess[
					getView().setProductSummary(it)
				])
			}
			
			input call.performCommit(CommitResultNotifier notifier) {
					service.createValue(getView().value,onSuccess[record|
						fire eventbus.WorkItemStockRecordsChanged()
						if(getView().value.print){
							if(getView().value.fitPrint)
								service.generateFitPrintContents(record,onSuccess[html|
									Print::it(html)
								])
							else
								service.generatePrintContents(record,onSuccess[html|
									Print::it(html)
								])
							
						}
						notifier.success
					])
			}			
		}
		
		service{
			@Inject mapper : WorkItemOutStockRecordMapper
			@Inject systemUserService : ISystemUserService
			@Inject warehouseService : RCWarehouseService
			@Inject systemParameter : RCSystemParameterService
			@Inject productSpecificationDAO : RCProductSpecificationDAO
			@Inject productWarehouseStorageSummaryMapper : ProductWarehouseStorageSummaryMapper
			
			op getProductSummaryByProductSid(sid : String, store : proxy of RCWarehouse):UIProductWarehouseStorageSummary{
				val productSpec = productSpecificationDAO.findBySid(sid)
				if(productSpec!=null){
					productWarehouseStorageSummaryMapper.transform(
						(entities.createQueryCriteria(typeof(RCProductWarehouseStorageSummaryCriteria))=>[
							it.productSpec = productSpec
							it.store = resolve store
						]).list.head
					)
				}
			}
			op loadValue(pvalue : proxy of RCWorkItemOutStockRecord) : UIWorkItemOutStockRecord{
				mapper.transform(resolve pvalue)
			}
			op createValue(uivalue : UIWorkItemOutStockRecord) : proxy of RCWorkItemOutStockRecord{
				val result = warehouseService.createWorkItemOutStockRecord[
					mapper.transform(uivalue,it)
				]
				result.commit((systemUserService.currentUser as RCEmployeeUser).employee)
				result.toProxy
			}
			op getRepairTask(workItem : proxy of RCWorkItemTask):proxy of RCRepairTask{
				val repairTask = (resolve workItem).groupTask.repairTask
				repairTask.toProxy=>[it.name=repairTask.reportSid]
			}			
			op generateFitPrintContents(record : proxy of RCWorkItemOutStockRecord) : String{
				Template::workItemOutStockFit(resolve record)
			}
			op generatePrintContents(record : proxy of RCWorkItemOutStockRecord) : String{
				Template::workItemOutStock(resolve record,systemParameter.systemParameter)
			}
			op getCurrentUser():proxy of RCEmployee{
				(systemUserService.currentUserAsParty as RCEmployee).toProxy
			}
			
		}
	}
	
	view CreateOrUpdateWorkItemOutStockRecordView for CreateOrUpdateWorkItemOutStockRecordPresenter implements IHasSize, IHasTitle{
		@Inject form : WorkItemOutStockRecordForm
		initializer{
			this += widgets.VLayout=>[add(form.asWidget, widgets.VLayoutData(1,-1,10))]
			form.setProductSidSelectedHandler[sid,store|
				fire view.productSidEntered(sid,store)
			]
		}
		op getValue() : UIWorkItemOutStockRecord{
			form.value
		}	
		op mapField(String errorKey): HasEditorErrors {
			form.mapToErrorEditor(errorKey)
		}
		op clearErrors():void{
			form.clearErrors
		}
		
		op setValue(UIWorkItemOutStockRecord value) : void{
			form.value = value
		}
		op getSize():Size{
			new Size(810,550)
		}
		op getTitle():String{
			'工单领料'
		}
		op setWorkItemTask(workItem   : proxy of RCWorkItemTask, repairTask : proxy of RCRepairTask):void{
			form.workItem.value = workItem
			form.reportSid.value = repairTask.name
		}
		op setSourceWarehouseContext(employee : proxy of RCEmployee, notifier : (Void)=>void):void{
			form.setSourceWarehouseContext(employee)[
				form.sourceStore.selectFirst
				form.setSourceWarehouse(form.sourceStore.value)				
				notifier.apply(null)
			]
		}
		op setProductSummary(productSummary : UIProductWarehouseStorageSummary):void{
			form.setProductSummary(productSummary)
		}
		
	}	
	presenter WorkItemOutStockRecordItemDetailPresenter{
		view interface{
			signal in setResults(value : UIWorkItemOutStockRecord,results : UIWorkItemStockRecordItem[*])
			signal out print()
		}
		
		interaction{
			context : proxy of RCWorkItemOutStockRecord
			input call.setup(postInit : (WorkItemOutStockRecordItemDetailPresenter)=>void){
				this.activate[
					postInit.apply(this)
				]
			}
			input call.setup(context : proxy of RCWorkItemOutStockRecord,postInit : (WorkItemOutStockRecordItemDetailPresenter)=>void){
				this.context = context
				this.activate[
					refresh
					postInit.apply(this)
				]
			}
			
			input call.setWorkItemOutStockRecord(context : proxy of RCWorkItemOutStockRecord){
				this.context = context
				refresh
			}
			
			input call.refresh(){
				if(context!=null){
					service.loadWorkItemStockRecordItemList(context,onSuccess[items|
						service.loadValue(context,onSuccess[value|
							fire view.setResults(value,items)
						])
					])
				}
			}
			input view.print(){
				service.generatePrintContents(context,onSuccess[html|
					Print::it(html)
				])
			}
		}
		
		service{
			@Inject mapper : WorkItemStockRecordItemMapper
			@Inject valueMapper : WorkItemOutStockRecordMapper
			
			op loadWorkItemStockRecordItemList(context : proxy of RCWorkItemOutStockRecord) : UIWorkItemStockRecordItem[*]{
				(resolve context).items.^map[mapper.transform(it)].unlazy
			}
			op loadValue(context : proxy of RCWorkItemOutStockRecord) : UIWorkItemOutStockRecord{
				valueMapper.transform((resolve context))
			}
			op generatePrintContents(record : proxy of RCWorkItemOutStockRecord) : String{
				Template::workItemOutStockFit(resolve record)
			}
			
		}
	}
	
	view WorkItemOutStockRecordItemDetailView for WorkItemOutStockRecordItemDetailPresenter  implements IHasTitle, IHasSize{
		con : Widget
		@Inject listGrid : WorkItemStockRecordItemListGrid
		@Inject detail : WorkItemOutStockRecordDetailForm
		asWidget():Widget{
			con
		}
		layout{
			con = widgets.ContentPanel=>[
				setBorders(false)
				setBodyBorder(false)
				widget = widgets.VLayout=>[
					add(detail.asWidget)
					add(widgets.FieldSet("领料明细")=>[
						it.widget = listGrid.asWidget
					],widgets.VLayoutData(1,1))
				]
				addButton(widgets.TextButton("打印")=>[
					addSelectHandler[
						fire view.print()
					]
				])
				
			]
		}
		op getTitle():String{
			"领/退料信息"
		}
		
		op getSize() : Size{
			new Size(800,550)
		}
		
		interaction{
			input view.setResults(value : UIWorkItemOutStockRecord ,results : UIWorkItemStockRecordItem[*]){
				detail.value = value
				listGrid.objects = results
			}
		}
	}
	
	
}
	
	


	