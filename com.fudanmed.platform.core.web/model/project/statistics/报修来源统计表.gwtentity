package com.fudanmed.platform.core.web feature project{
	
	import java.util.Collection
	import edu.fudan.langlab.domain.security.*
	import edu.fudan.langlab.domain.organization.*
	import com.fudanmed.platform.core.web.*
	import com.fudanmed.platform.core.common.*
	import com.fudanmed.platform.core.domain.*

	import com.fudanmed.platform.core.web.shared.organization.*
	import com.fudanmed.platform.core.web.client.organization.*
	import com.fudanmed.platform.core.web.server.^service.organization.*
	import com.fudanmed.platform.core.web.shared.project.*
	import com.fudanmed.platform.core.web.client.project.*
	import com.fudanmed.platform.core.web.server.^service.project.*
	import com.fudanmed.platform.core.web.client.chart.*
	import edu.fudan.langlab.gxt.client.component.grid.ValueProviderAdaptor
	import edu.fudan.langlab.uidl.domain.app.client.workbench.*
	import edu.fudan.mylang.utils.*
	import com.uniquesoft.gwt.shared.datatype.*
	
	ui-command RepairTaskStatByReportSourceCommand "报修来源统计" @statistics{
		factory repairTaskStatByReportSourcePresenter : RepairTaskStatByReportSourcePresenter
		factory framedPresenter : FramedPresenter
		execute{
			repairTaskStatByReportSourcePresenter.get.setup[
				framedPresenter.get.setup("报修来源统计",it)[
					fire eventbus.ShowActivePresenter(it)
				]
			]
		}
	}	
	ui-datatype UIRepairTaskStatByReportSourceCriteriaData for RCRepairTaskStatByReportSourceCriteriaData{		
		cnt : Long
		faultReportSource : proxy of RCFaultReportSource
		map RepairTaskStatByReportSourceCriteriaDataMapper{
			direct{cnt readonly, faultReportSource readonly}
		}
		
	}	
	presenter RepairTaskStatByReportSourcePresenter{
		view interface{
			op showResult(results:Collection<UIRepairTaskStatByReportSourceCriteriaData>):void
			op refresh():void
			signal out filterRequest(c : UIRepairTaskCriteria)
		}
		
		interaction{
			part repairTaskStatByFaultTypeListPresenter :RepairTaskStatByFaultTypeListPresenter
			part repairTaskStatByOrganizationTypeListPresenter :RepairTaskStatByOrganizationTypeListPresenter
			part groupTaskStatByTeamListPresenter : GroupTaskStatByTeamListPresenter
			input prepare.setup(){
				initPart(repairTaskStatByFaultTypeListPresenter).setup[
				initPart(repairTaskStatByOrganizationTypeListPresenter).setup[
				initPart(groupTaskStatByTeamListPresenter).setup[
				this.activate[
					getView().refresh
					done
				]]]]
			}
			
			input view.filterRequest(c : UIRepairTaskCriteria){
				service.loadResult(c,onSuccess[
					getView().showResult(it)
				])
			}
		}
	 
		service{
			@Inject criteriaMapper : RepairTaskCriteriaMapper
			@Inject mapper : RepairTaskStatByReportSourceCriteriaDataMapper
			op loadResult(uicriteria : UIRepairTaskCriteria):Collection<UIRepairTaskStatByReportSourceCriteriaData>{
				val c = uicriteria.createPagedCriteria(typeof(RCRepairTaskCriteria),criteriaMapper,entities)
				c.includeFinishedTask = true
				val result = c.createStatCriteria(typeof(RCRepairTaskStatByReportSourceCriteria)).list.^map[mapper.transform(it)].unlazy
				entities.all(typeof(RCFaultReportSource)).^map[source|
					result.findFirst[it.faultReportSource.id == source.id].nullsafe[
						new UIRepairTaskStatByReportSourceCriteriaData()=>[
							it.faultReportSource = source.toProxy
							it.cnt = 0l
						]
					]
				].unlazy
			}
		}
	}
	view RepairTaskStatByReportSourceView for RepairTaskStatByReportSourcePresenter{
		con: Widget
		asWidget():Widget{
			con
		}
		chart : PieChart<UIRepairTaskStatByReportSourceCriteriaData>
		@Inject criteriaForm : RepairTaskCriteriaForm

		layout{
			con = 
				widgets.VLayout=>[
					add(
						TABLE=>[
						tr=>[
							td=>[it+=criteriaForm.reportDateRange.asWidget=>[
								criteriaForm.reportDateRange.value = new com.uniquesoft.gwt.shared.datatype.UIDateRange=>[
									it.^from = today.addMonths(-12)
									it.^to = today
								]
								criteriaForm.reportDateRange.addValueChangedListener[
									refresh
								]
							]
							]
							td=>[
								it+=widgets.TextButton("刷新")[
									refresh
								]
							]
						]
					],widgets.VLayoutData(1,-1)
					)
					chart = new PieChart=>[
						categoryProvider = [faultReportSource.name]
						numberProvider = [cnt]
					]
					
					add(chart.asWidget,widgets.VLayoutData(1,0.6))
					
					chart.addValueSelectedListener[
						repairTaskStatByFaultTypeListPresenter.setReportSource(criteriaForm.value.reportDateRange,it.faultReportSource)
						repairTaskStatByOrganizationTypeListPresenter.setReportSource(criteriaForm.value.reportDateRange,it.faultReportSource)
						groupTaskStatByTeamListPresenter.setReportSource(criteriaForm.value.reportDateRange,it.faultReportSource)
						chart.highlight(it)
					]
					add(widgets.HLayout=>[
						add(widgets.FieldSet("故障类型统计")=>[
							widget = repairTaskStatByFaultTypeListPresenter.getView().asWidget
							],widgets.HLayoutData(0.33,1)
						)
						add(widgets.FieldSet("报修部门统计")=>[
							widget = repairTaskStatByOrganizationTypeListPresenter.getView().asWidget
							],widgets.HLayoutData(0.33,1))
						add(widgets.FieldSet("维修班组统计")=>[
							widget = groupTaskStatByTeamListPresenter.getView().asWidget
							],widgets.HLayoutData(0.34,1))
					],widgets.VLayoutData(1,0.4))
				]
				
		}

		op refresh():void{
			repairTaskStatByFaultTypeListPresenter.setDateRange(criteriaForm.value.reportDateRange)
			repairTaskStatByOrganizationTypeListPresenter.setDateRange(criteriaForm.value.reportDateRange)
			groupTaskStatByTeamListPresenter.setDateRange(criteriaForm.value.reportDateRange)
			fire view.filterRequest(criteriaForm.value)
		}

		op showResult(results:Collection<UIRepairTaskStatByReportSourceCriteriaData>):void{
			chart.objects = results
		}

	}	
	
}